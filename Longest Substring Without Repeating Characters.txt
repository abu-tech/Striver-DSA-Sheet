// int uniqueSubstrings(string input){
//     unordered_set<int> set;
//     int ans = 0;
//     int left = 0;
//     for (int right = 0; right < input.length(); right++){
//         if (set.find(input[right]) != set.end()){
//             while (left < right && set.find(input[right]) != set.end()){
//                 set.erase(input[left]);
//                 left++;
//             }
//         }
//         set.insert(input[right]);
//         ans = max(ans, right - left + 1);
//     }
//     return ans;
// }

int uniqueSubstrings(string str){
    unordered_map<char,int> map;
    int l = 0;
    int ans = 0;
    for (int r = 0; r < str.length(); r++){
        if (map.find(str[r]) != map.end()){
            l = max(map[str[r]] + 1, l);
        }
        map[str[r]] = r;
        ans = max(ans, r - l + 1);
    }
    return ans;
}



