// pair<long long int,long long int> missingAndRepeating(vector<int> &arr, int n)
// {
//     long long int s = (n * (n + 1) ) / 2;
//     long long int p = (n * (n + 1) * (2 * n + 1) ) / 6;
//     int missingNumber = 0, repeatingNumber = 0;
    
//     for (int i=0; i<n; i++){
//         s -= (long long int)arr[i];
//         p -= (long long int)arr[i] * (long long int)arr[i];
//     }
    
//     missingNumber = (s + p/s)/2;
//     repeatingNumber = missingNumber - s;
//     pair<long long int, long long int> ans;
//     ans.first = missingNumber;
//     ans.second = repeatingNumber;
//     return ans;
// }

// pair<int,int> missingAndRepeating(vector<int> &arr, int n){

// int Xor = 0;

// for(auto i : arr){

//  Xor ^= i;

// }
//we can solve this using xor operation too which is most optimal solution

pair<int, int> missingAndRepeating(vector<int> &arr, int n){
    pair<int, int> ans;
    for (int i=0; i<n; i++){
        if (arr[abs(arr[i]) - 1] < 0){
            ans.second = abs(arr[i]);
        }
        else{
            arr[abs(arr[i])-1] = -arr[abs(arr[i])-1];
        }
    }
    for (int i=0; i<n; i++){
        if (arr[i] > 0){
            ans.first= i + 1;
            break;
        }
    }
    return ans;
}
