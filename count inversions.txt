long long merge(long long arr[], int left, int mid, int right){
    long long count = 0;
    long long temp[right + left + 1];
    int i = left, j = mid + 1, k = 0;
    while (i <= mid && j <= right){
        if (arr[i] <= arr[j]){
            temp[k++] = arr[i++];
        }
        else{
            temp[k++] = arr[j++];
            count += (mid + 1 - i);
        }
    }
    while (i <= mid)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];
    int l = left, m = 0;
    while (l <= right)
        arr[l++] = temp[m++];
    
    return count;
}

long long mergeSort(long long arr[], int left, int right){
    long long count = 0;
    if (left < right){
        int mid = (left + right) / 2;
        count += mergeSort(arr, left, mid);
        count += mergeSort(arr, mid + 1, right);
        count += merge(arr, left, mid, right);
    }
    return count;
}

long long getInversions(long long *arr, int n){
    return mergeSort(arr, 0, n-1);
}