int merge(vector<int> &arr, int left, int mid, int right){
    int j = mid + 1;
    int cnt = 0;
    for (int i=left; i<=mid; i++){
        while (j <= right && arr[i] > 2LL * arr[j]) j++;
        cnt += (j - (mid + 1));
    }
    
    int low = left, high = mid + 1;
    vector<int> temp;
    while (low <= mid && high <= right){
        if (arr[low] <= arr[high])
            temp.push_back(arr[low++]);
        else
            temp.push_back(arr[high++]);
    }
    while (low <= mid){
        temp.push_back(arr[low++]);
    }
    while (high <= right){
        temp.push_back(arr[high++]);
    }
    for (int i = left; i <= right; i++){
        arr[i] = temp[i - left];
    }
    return cnt;
}

int mergeSort(vector<int> &arr, int left, int right){
    int cnt = 0;
    if (left >= right) return 0;
        int mid = (left + right) / 2;
        cnt += mergeSort(arr, left, mid);
        cnt += mergeSort(arr, mid + 1, right);
        cnt += merge(arr, left, mid, right);
    return cnt;
}

int reversePairs(vector<int> &arr){
    return mergeSort(arr, 0, arr.size() - 1);    
}