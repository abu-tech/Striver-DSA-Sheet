    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        int n = nums.size();
        vector<vector<int>> ans;
        if (n == 0)
            return ans;
        sort(nums.begin(), nums.end());
        for (int i = 0; i < n; i++){
            for (int j = i + 1; j < n; j++){
                int left = j + 1, right = n - 1;
                long long target_2 = (long long)target - (long long)(nums[i] + nums[j]);
                while (left < right){
                    int two_sum = nums[left] + nums[right];
                    if (two_sum < target_2)
                        left++;
                    else if (two_sum > target_2)
                        right--;
                    else{
                        vector quad(4,0);
                        quad[0] = nums[i];
                        quad[1] = nums[j];
                        quad[2] = nums[left];
                        quad[3] = nums[right];
                        ans.push_back(quad);
                        //dealing with duplicates of number 3
                        while (left < right && nums[left] == quad[2]) left++;
                        //dealing with duplicates of number 4
                        while (left < right && nums[right] == quad[3]) right--;
                    }   
                }
                while (j + 1 < n && nums[j + 1] == nums[j]) j++;   
            }
            while (i + 1 < n && nums[i + 1] == nums[i]) i++;
        }
        return ans;
    }